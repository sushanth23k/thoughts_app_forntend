/**
 * Generates a unique ID for entities
 */
export const generateUniqueId = (): string => {
  return Math.random().toString(36).substring(2, 15) + 
         Math.random().toString(36).substring(2, 15);
};

/**
 * Formats a date to a readable string
 */
export const formatDate = (date: Date): string => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
};

/**
 * Converts audio frequency data to a normalized array
 */
export const normalizeFrequencies = (frequencies: Uint8Array, maxBars: number = 50): number[] => {
  const normalizedFrequencies: number[] = [];
  const step = Math.floor(frequencies.length / maxBars);
  
  for (let i = 0; i < maxBars; i++) {
    const start = i * step;
    let sum = 0;
    for (let j = 0; j < step && start + j < frequencies.length; j++) {
      sum += frequencies[start + j];
    }
    // Normalize to a value between 0 and 1
    normalizedFrequencies.push(sum / step / 255);
  }
  
  return normalizedFrequencies;
};

/**
 * Checks if a frequency array indicates silence
 */
export const isSilence = (frequencies: number[], threshold: number = 0.1, duration: number = 3000): boolean => {
  // If all frequencies are below the threshold, consider it silence
  return frequencies.every(freq => freq < threshold);
};

/**
 * Mocks an API response for development purposes
 */
export const mockApiResponse = (endpoint: string, data?: any): Promise<any> => {
  const mockResponses = {
    '/api/start_conversation': {
      conversationId: generateUniqueId(),
      message: 'Conversation started successfully',
    },
    '/api/conversation_loop': {
      thought: 'This is a mock thought generated by the AI assistant.',
      audioUrl: null, // In a real app, this would be a base64 encoded audio or URL
    },
  };
  
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(mockResponses[endpoint as keyof typeof mockResponses] || { error: 'Endpoint not found' });
    }, 500); // Simulate network delay
  });
}; 